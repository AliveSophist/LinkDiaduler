package com.thesophist.window.macro;

import java.awt.MouseInfo;
import java.awt.Point;

import de.ksquared.system.keyboard.GlobalKeyListener;
import de.ksquared.system.keyboard.KeyAdapter;
import de.ksquared.system.keyboard.KeyEvent;
import de.ksquared.system.mouse.GlobalMouseListener;
import de.ksquared.system.mouse.MouseAdapter;
import de.ksquared.system.mouse.MouseEvent;

public class GlobalListener {
	private static boolean recordOnOff=false;
	
	public GlobalListener(){
		new GlobalKeyListener().addKeyListener(new KeyAdapter() {
			@Override public void keyPressed(KeyEvent event) {
				System.out.print(event.getVirtualKeyCode());
				String key=toKeyString(event.getVirtualKeyCode());
				switch(key){
				case "122"://F11 = Start
					recordOnOff=true;
					while(recordOnOff)
						try { Thread.sleep(100); }
					catch(InterruptedException e) { e.printStackTrace(); }
					return ;
				case "123"://F12 = End
					recordOnOff=false;
					break;
				}				
				if(!recordOnOff)
					return ;
				
				JPanelHome.list.addElement(ControlRobot.packKeyEvent("press", key));
			}
			@Override public void keyReleased(KeyEvent event) {
				if(!recordOnOff)
					return ;
				
				JPanelHome.list.addElement(ControlRobot.packKeyEvent("release", toKeyString(event.getVirtualKeyCode())));
			}
		});
		
		new GlobalMouseListener().addMouseListener(new MouseAdapter() {
			@Override public void mousePressed(MouseEvent event)  {
				if(!recordOnOff)
					return ;
				
				Point p = MouseInfo.getPointerInfo().getLocation();
				JPanelHome.list.addElement(ControlRobot.packMouseEvent("move",p.x*10000+p.y+""));

				JPanelHome.list.addElement(ControlRobot.packMouseEvent("press",toMouseButtonString(MouseEvent.BUTTON_NO)));
			}
			@Override public void mouseReleased(MouseEvent event)  {
				if(!recordOnOff)
					return ;
				
				Point p = MouseInfo.getPointerInfo().getLocation();
				JPanelHome.list.addElement(ControlRobot.packMouseEvent("move",p.x*10000+p.y+""));

				JPanelHome.list.addElement(ControlRobot.packMouseEvent("release",toMouseButtonString(MouseEvent.BUTTON_NO)));
			}
//			@Override public void mouseMoved(MouseEvent event) {
//				Point p = MouseInfo.getPointerInfo().getLocation();
//				JPanelHome.list.addElement(ControlRobot.packMouseEvent("move",p.x*10000+p.y+""));
//			}
		});
	}

	public static String toMouseButtonString(int button){
		switch(button){
		case 16:
			return "Left";
		case 8:
			return "Middle";
		case 4:
			return "Right";
		}
		return null;
	}
	public static String toKeyString(int button){
		switch(button){
		case 8:
			return "backspace";
		case 9:
			return "tab";
		case 13:
			return "enter";
		case 16:
			return "shift";
		case 17:
			return "ctrl";
		case 18:
			return "alt";
		case 19:
			return "pause/break";
		case 20:
			return "caps lock";
		case 27:
			return "escape";
		case 33:
			return "page_up";
		case 34:
			return "page_down";
		case 35:
			return "end";
		case 36:
			return "home";
		case 37:
			return "left_arrow";
		case 38:
			return "up_arrow";
		case 39:
			return "right_arrow";
		case 40:
			return "down_arrow";
		case 45:
			return "insert";
		case 46:
			return "delete";
		case 48:
			return "0";
		case 49:
			return "1";
		case 50:
			return "2";
		case 51:
			return "3";
		case 52:
			return "4";
		case 53:
			return "5";
		case 54:
			return "6";
		case 55:
			return "7";
		case 56:
			return "8";
		case 57:
			return "9";
		case 65:
			return "a";
		case 66:
			return "b";
		case 67:
			return "c";
		case 68:
			return "d";
		case 69:
			return "e";
		case 70:
			return "f";
		case 71:
			return "g";
		case 72:
			return "h";
		case 73:
			return "i";
		case 74:
			return "j";
		case 75:
			return "k";
		case 76:
			return "l";
		case 77:
			return "m";
		case 78:
			return "n";
		case 79:
			return "o";
		case 80:
			return "p";
		case 81:
			return "q";
		case 82:
			return "r";
		case 83:
			return "s";
		case 84:
			return "t";
		case 85:
			return "u";
		case 86:
			return "v";
		case 87:
			return "w";
		case 88:
			return "x";
		case 89:
			return "y";
		case 90:
			return "z";
		case 91:
			return "left_window_key";
		case 92:
			return "right_window_key";
		case 93:
			return "select_key";
		case 96:
			return "numpad_0";
		case 97:
			return "numpad_1";
		case 98:
			return "numpad_2";
		case 99:
			return "numpad_3";
		case 100:
			return "numpad_4";
		case 101:
			return "numpad_5";
		case 102:
			return "numpad_6";
		case 103:
			return "numpad_7";
		case 104:
			return "numpad_8";
		case 105:
			return "numpad_9";
		case 106:
			return "multiply";
		case 107:
			return "add";
		case 109:
			return "subtract";
		case 110:
			return "decimal_point";
		case 111:
			return "divide";
		case 112:
			return "f1";
		case 113:
			return "f2";
		case 114:
			return "f3";
		case 115:
			return "f4";
		case 116:
			return "f5";
		case 117:
			return "f6";
		case 118:
			return "f7";
		case 119:
			return "f8";
		case 120:
			return "f9";
		case 121:
			return "f10";
		case 122:
			return "f11";
		case 123:
			return "f12";
		case 144:
			return "num_lock";
		case 145:
			return "scroll_lock";
		case 186:
			return "semi-colon";
		case 187:
			return "equal_sign";
		case 188:
			return "comma";
		case 189:
			return "dash";
		case 190:
			return "period";
		case 191:
			return "forward_slash";
		case 192:
			return "grave_accent";
		case 219:
			return "open_bracket";
		case 220:
			return "back_slash";
		case 221:
			return "close_braket";
		case 222:
			return "single_quote";
		}
		return null;
	}
}